# -*- coding: utf-8 -*-
"""Ciclo03  - Exercícios.ipynbE

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FH8ES_wa18uqvFF2Ve6JazwUcIxjKjbW
"""

import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
import plotly.express as px

dados = pd.read_csv ('/content/AB_NYC_2019.csv')

dados.head(3)

"""## Média de preços de alugueis por região

"""

import plotly.express as px

# Selecionar as colunas 'price' e 'neighbourhood_group'
colunas = 'price', 'neighbourhood_group'

# Criando Primary_Key
group_by = 'neighbourhood_group'

# Agrupando por região
dados.loc[:, colunas].groupby(group_by).mean().reset_index()

"""## Qual é o valor do aluguel (diária) mais caro de cada região da cidade de Nova York?"""

# Recolher os dados da coluna de aluguel 'price' e 'neighbourhood_group'

colunas = 'price' , 'neighbourhood_group'
primary_key = ['neighbourhood_group']

# Agrupar por 'neighbourhood_group' max()

data_plot = dados.loc[:,colunas ].groupby( primary_key ).max().reset_index()

# Gráfico de colunas histograma
px.bar( data_plot, x='neighbourhood_group', y='price')

"""## Qual o maior valor do aluguel por bairro e por tipo de quarto?

"""

# Selecionar as colunas 'price', 'neighbourhood' e 'room_type'
colunas = ['price'
           ,'neighbourhood'
           ,'room_type']

# Agrupar por 'neighbourhood' e 'room_type'
group_by = ['neighbourhood'
            ,'room_type']

# Max para exibir qual o maior valor
dados.loc [:,colunas].groupby(group_by).max().reset_index()

"""## Qual o menor valor de latitude região?"""

colunas = [ 'neighbourhood_group'
           ,'latitude' ]

group_by = [ 'neighbourhood_group' ]

# Min para exibir o menor valor de latitude por região
dados_para_grafico = dados.loc [ : , colunas ].groupby( group_by ).min().reset_index()

# Gráfico de barras
px.bar (dados_para_grafico,x = 'neighbourhood_group', y = 'latitude', text = 'latitude' )

"""## ID dos proprietários que possuem mais de um imóvel cadastrado.

"""

# Selecionar as colunas 'host_name' e 'calculated_host_listings_count', sendo essa última > 2
colunas = ['host_id' , 'calculated_host_listings_count']
linhas = dados.loc [:, 'calculated_host_listings_count'] > 1

# Agrupar por proprietário
group_by = ['host_id']

# Filtrar apenas os com mais de 2
data_plot = dados.loc [linhas,colunas].groupby(group_by).count().reset_index()

# Histograma
plt.hist(data_plot);